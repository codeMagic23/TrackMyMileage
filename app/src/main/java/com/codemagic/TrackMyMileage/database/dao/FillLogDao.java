package com.codemagic.TrackMyMileage.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.codemagic.TrackMyMileage.database.dao.FillLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FILL_LOG.
*/
public class FillLogDao extends AbstractDao<FillLog, Void> {

    public static final String TABLENAME = "FILL_LOG";

    /**
     * Properties of entity FillLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FillDate = new Property(0, java.util.Date.class, "fillDate", false, "FILL_DATE");
        public final static Property Gallons = new Property(1, double.class, "gallons", false, "GALLONS");
        public final static Property PricePerGallon = new Property(2, Double.class, "pricePerGallon", false, "PRICE_PER_GALLON");
        public final static Property CurMiles = new Property(3, long.class, "curMiles", false, "CUR_MILES");
        public final static Property VehicleName = new Property(4, String.class, "vehicleName", false, "VEHICLE_NAME");
    };


    public FillLogDao(DaoConfig config) {
        super(config);
    }
    
    public FillLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FILL_LOG' (" + //
                "'FILL_DATE' INTEGER NOT NULL ," + // 0: fillDate
                "'GALLONS' REAL NOT NULL ," + // 1: gallons
                "'PRICE_PER_GALLON' REAL," + // 2: pricePerGallon
                "'CUR_MILES' INTEGER NOT NULL ," + // 3: curMiles
                "'VEHICLE_NAME' TEXT NOT NULL );"); // 4: vehicleName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FILL_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FillLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFillDate().getTime());
        stmt.bindDouble(2, entity.getGallons());
 
        Double pricePerGallon = entity.getPricePerGallon();
        if (pricePerGallon != null) {
            stmt.bindDouble(3, pricePerGallon);
        }
        stmt.bindLong(4, entity.getCurMiles());
        stmt.bindString(5, entity.getVehicleName());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FillLog readEntity(Cursor cursor, int offset) {
        FillLog entity = new FillLog( //
            new java.util.Date(cursor.getLong(offset + 0)), // fillDate
            cursor.getDouble(offset + 1), // gallons
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // pricePerGallon
            cursor.getLong(offset + 3), // curMiles
            cursor.getString(offset + 4) // vehicleName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FillLog entity, int offset) {
        entity.setFillDate(new java.util.Date(cursor.getLong(offset + 0)));
        entity.setGallons(cursor.getDouble(offset + 1));
        entity.setPricePerGallon(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setCurMiles(cursor.getLong(offset + 3));
        entity.setVehicleName(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FillLog entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FillLog entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
