package com.codemagic.TrackMyMileage.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.codemagic.TrackMyMileage.database.dao.Vehicle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VEHICLE.
*/
public class VehicleDao extends AbstractDao<Vehicle, Long> {

    public static final String TABLENAME = "VEHICLE";

    /**
     * Properties of entity Vehicle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VehicleName = new Property(1, String.class, "vehicleName", false, "VEHICLE_NAME");
        public final static Property MakeModel = new Property(2, String.class, "makeModel", false, "MAKE_MODEL");
        public final static Property Year = new Property(3, Integer.class, "year", false, "YEAR");
        public final static Property EngineType = new Property(4, String.class, "engineType", false, "ENGINE_TYPE");
    };


    public VehicleDao(DaoConfig config) {
        super(config);
    }
    
    public VehicleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VEHICLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'VEHICLE_NAME' TEXT NOT NULL ," + // 1: vehicleName
                "'MAKE_MODEL' TEXT NOT NULL ," + // 2: makeModel
                "'YEAR' INTEGER," + // 3: year
                "'ENGINE_TYPE' TEXT);"); // 4: engineType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VEHICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Vehicle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getVehicleName());
        stmt.bindString(3, entity.getMakeModel());
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(4, year);
        }
 
        String engineType = entity.getEngineType();
        if (engineType != null) {
            stmt.bindString(5, engineType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Vehicle readEntity(Cursor cursor, int offset) {
        Vehicle entity = new Vehicle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // vehicleName
            cursor.getString(offset + 2), // makeModel
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // year
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // engineType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Vehicle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVehicleName(cursor.getString(offset + 1));
        entity.setMakeModel(cursor.getString(offset + 2));
        entity.setYear(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setEngineType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Vehicle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Vehicle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
